// The rxgen is the command line utility that generates the
// Unmarshal and Marshal methods of selected structs.
package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

var (
	typeNames = flag.String("type", "", "comma-separated list of type names; must be set")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\trxgen [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	flag.Usage = Usage
	flag.Parse()
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	var dir string
	g := Generator{}
	types := strings.Split(*typeNames, `,`)

	args := flag.Args()
	// if directory is supplied, then use it, else assume current directory
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
	} else {
		dir = "."
	}
	g.parsePackageDir(dir)

	// for each type listed, generate code
	_ = types
	//spew.Dump(g.)

	// Print the header and package clause.
	g.Printf("// Code generated by \"rxgen %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")
	g.Printf("import \"strconv\"\n") // Used by all methods.

	// Run generate for each type.
	for _, typeName := range types {
		g.generate(typeName)
	}

	// Format the output.
	src := g.format()

	// Write to file.
	baseName := fmt.Sprintf("%s_rxgen.go", types[0])
	outputName := filepath.Join(dir, strings.ToLower(baseName))

	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}
